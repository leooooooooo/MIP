//
//  UIViewController+CustomExtensions.m
//  Sandglass
//
//  Created by sea on 13-12-2.
//
//

#import "UIViewController+CustomExtensions.h"

@implementation UIViewController (CustomExtensions)

@end







#import "SystemInfo.h"

#import <objc/runtime.h>

static char monitorKey;

@implementation UIViewController (Monitor)


- (void)setIsNeedNetworkMonitor:(BOOL)nIsNeedNetworkMonitor {
    
    if (nIsNeedNetworkMonitor) {
        
        [[NSNotificationCenter defaultCenter] addObserver: self selector: @selector(reachabilityChanged:) name: kReachabilityChangedNotification object: nil];
        
        NetworkStatus status = [[SystemInfo shareSystemInfo] currentNetworkStatus];
        
        [self updateInterfaceWithNetworkStatus:status];
        
    }
    else {
        
        [[NSNotificationCenter defaultCenter] removeObserver:self name:kReachabilityChangedNotification object:nil];
    }
    
    objc_setAssociatedObject(self, &monitorKey, [NSNumber numberWithBool:nIsNeedNetworkMonitor], OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (BOOL)isNeedNetworkMonitor {
    
    return [objc_getAssociatedObject(self, &monitorKey) boolValue];
}

#pragma mark -
#pragma mark Reachability methods

//Called by Reachability whenever status changes.
- (void)reachabilityChanged: (NSNotification* )note
{
	Reachability* curReach = [note object];
	NSParameterAssert([curReach isKindOfClass: [Reachability class]]);
	[self updateInterfaceWithNetworkStatus: [curReach currentReachabilityStatus]];
}


/*!
 @function
 @abstract      根据当前网络状态更新控制器状态
 
 @note          注: 可重载此方法,其子类可根据网络变化更新控制器状态
 
 @param         NetworkStatus             网络状态
 
 @result
 */
- (void)updateInterfaceWithNetworkStatus: (NetworkStatus)status
{
    switch (status)
    {
        case NotReachable:
        {
            break;
        }
            
        case ReachableViaWWAN:
        {
            break;
        }
        case ReachableViaWiFi:
        {
            break;
        }
    }
}


@end
