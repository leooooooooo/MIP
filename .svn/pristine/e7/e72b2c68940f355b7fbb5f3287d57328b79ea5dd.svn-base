/********************************************************************
 Author: li_xiangai
 Class description:LocalFileManager
 *******************************************************/
#import "LocalFileManager.h"
#import "ZipArchive.h"

@implementation FileInformation

@synthesize  name;
@synthesize path;
@synthesize modificationDate;
@synthesize creationDate;
@synthesize author;
@synthesize size;
@synthesize type;


-(void)dealloc
{
    [name release];
    [path release];
    [modificationDate release];
    [creationDate release];
    [author release];
    [size release];
    [type release];
    [super dealloc];

}
@end

@implementation LocalFileManager
/*********************************************************************
 Function description:剪切粘贴文件或文件夹 成功：YES 失败：NO
 input Parameter: sourcePath,  //文件原路径
 input Parameter:destinationPath  //目的地路径
 Return value: BOOL
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(BOOL)cutAndPasteFileOrFolder:(NSString *)sourcePath
               DestinationPath:(NSString*)destinationPath
{
    
    if ([sourcePath isEqualToString:destinationPath])
    {
        return YES;
    }
    
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error =nil;

    [fileManager moveItemAtPath:sourcePath toPath:destinationPath error:&error];
    
    if (error != nil)
    {
         NSLog(@"error-->%@",[error description]);
        return NO;
    }
    
    return YES;
}
/*********************************************************************
 Function description:拷贝文件或文件夹 成功：YES 失败：NO
 Parameter: sourcePath,  //文件原路径
 Parameter:destinationPath  //目的地路径
 Return value: BOOL
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(BOOL) copyFileOrFolder:(NSString *)sourcePath
         DestinationPath:(NSString*)destinationPath
{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error =nil;
    [fileManager copyItemAtPath:sourcePath toPath:destinationPath error:&error];
    
    if (error != nil)
    {
        NSLog(@"error-copy->%@",[error description]);
        return NO;
    }
    return YES;
}
/*********************************************************************
 Function description:document文件夹路径
 Parameter: N/A
 Return value: NSString
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(NSString *)documentsFolderPath
{
	NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
	NSString *documentsPath = [paths objectAtIndex:0];
    NSLog(@"---documentsPath-->%@",documentsPath);
	return documentsPath;
}

/*********************************************************************
 Function description:删除文件或文件夹，成功：YES 失败：NO
 input Parameter: path        //文件路径
 Return value: BOOL
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(BOOL)deleteFileOrFolder:(NSString *)path
{
    
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error =nil;
    [fileManager removeItemAtPath:path error:&error];
    
    if (error != nil)
    {
         NSLog(@"error-delete->%@",[error description]);
        return NO;
    }
    return YES;
    
}
/*********************************************************************
 Function description:获取文件属性，返回FileInformation对象
 input Parameter: path        //文件路径
 Return value: FileInformation
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(FileInformation*)fileAttributesAtPath:(NSString*)path
{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error =nil;
    
    NSDictionary *fileAttributes = [fileManager attributesOfItemAtPath:path error:&error];
//    NSLog(@"fileAttributes--->%@",fileAttributes);
    
    if (error)  //获取属性失败
    {
        NSLog(@"Attributes error-->%@",[error description]);
        return nil;
    }
    
    NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc]init] autorelease];
    [dateFormatter setDateFormat:@"yyyy-MM-dd hh:mm:ss a"];
    FileInformation *fileInformation = [[FileInformation alloc]init];
    fileInformation.name = [path lastPathComponent];
    fileInformation.path = path;
    fileInformation.creationDate = [dateFormatter stringFromDate: [fileAttributes objectForKey:NSFileCreationDate]];
    fileInformation.modificationDate = [dateFormatter stringFromDate: [fileAttributes objectForKey:NSFileModificationDate]];
    fileInformation.size = [fileAttributes objectForKey:NSFileSize];
    fileInformation.author = [fileAttributes objectForKey:NSFileOwnerAccountName];
    fileInformation.type = fileAttributes.fileType;
    return [fileInformation autorelease];
}

/*********************************************************************
 Function description:重命名文件
 input Parameter: sourcePath,  //文件原路径
 input Parameter:destinationPath  //重命名后文件路径
 Return value: bool
 Author: li_xiangai
 Remark: override
 *********************************************************************/

+(BOOL)renameFileOrFolder:(NSString *)sourcePath
          DestinationPath:(NSString*)destinationPath
{
    if ([sourcePath isEqualToString:destinationPath])
    {
        return YES;
    }
    
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error =nil;
    [fileManager moveItemAtPath:sourcePath toPath:destinationPath error:&error];
    
    if (error != nil)
    {
        NSLog(@"rename error-->%@",[error description]);
        return NO;
    }
    return YES;
}
/*********************************************************************
 Function description:新建文件或文件夹
 input Parameter: path
 Return value: bool
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(BOOL)createFileOrFolder:(NSString*)path 
{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    
    if ([[path substringFromIndex:path.length -1] isEqualToString:@"/"])
    {
        NSError *error =nil;
		[fileManager createDirectoryAtPath:path withIntermediateDirectories:NO attributes:nil error:&error];
        
        if (error)
        {
            NSLog(@"create error-->%@",[error description]);
            return NO;
        }
        return YES;
    }
    else if([path pathExtension].length != 0)
    {
        return [fileManager createFileAtPath:path contents:nil attributes:nil];
    }
    return NO;
    
}

/*********************************************************************
 Function description:文件或文件夹是否存在
 input Parameter: path，    //文件路径
 output Parameter: isDirectory    //是否文件夹
 Return value: bool
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(BOOL)fileExistAtPath:(NSString *)path IsDirectory:(BOOL*)isDirectory
{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    
    return [fileManager fileExistsAtPath:path  isDirectory:isDirectory];
}
/*********************************************************************
 Function description:压缩文件或文件夹
 input Parameter: path
 Return value: bool
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(BOOL)compressFileOrFolder:(NSString*)path
{
    ZipArchive* zip = [[ZipArchive alloc] init];
    NSString *tempString = [path  stringByDeletingPathExtension];
    NSString *newPath =[NSString stringWithFormat:@"%@.zip",tempString];
    BOOL ret = [zip CreateZipFile2:newPath] ;
    
    if (!ret)
    {
        [zip release];
        return ret;
    }
    
    ret = [zip addFileToZip:path newname:[path lastPathComponent]];
    
    if( [zip CloseZipFile2]  && ret)
    {
        [zip release];
        return ret;
    }
    
    [zip release];
    return NO;
}
/*********************************************************************
 Function description:解压文件或文件夹
 input Parameter: path
 Return value: bool
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(BOOL)decompressFileOrFolder:(NSString *)path
{

    
    ZipArchive* zip = [[ZipArchive alloc] init];
    NSString *unzipto = [path  stringByDeletingPathExtension];
    
    if( [zip UnzipOpenFile:path] )
    {
        BOOL ret = [zip UnzipFileTo:unzipto overWrite:YES];
        [zip UnzipCloseFile];
        [zip release];
        return ret;
    }  
    [zip release];
    return NO;

}
/*********************************************************************
 Function description:文件大小转化为GB.KB形式
 input Parameter: sourceSize   ／／long long
 Return value: NSString
 Author: li_xiangai
 Remark: override
 *********************************************************************/
+(NSString *)convertFileSizeToString:(long long)sourceSize
{
    
     NSString*sizeType = @"B";
    
    float x = (float)sourceSize;
    
    if(x < 1024)
    {
        return [NSString stringWithFormat:@"%lld%@",sourceSize,sizeType];
    }
    else
    {
        if (x >= 1024)
        {
            //Kilobytes
            x = x / 1024;
            sizeType = @"KB";
        }
        
        if (x >= 1024)
        {
            //Megabytes
            x = x / 1024;
            sizeType = @" MB";
        }
        
        if (x >= 1024)
        {
            //Gigabytes
            x = x / 1024;
            sizeType = @"GB";
        }
    }
    
    return [NSString stringWithFormat:@"%0.1f%@",x,sizeType];
}

@end
