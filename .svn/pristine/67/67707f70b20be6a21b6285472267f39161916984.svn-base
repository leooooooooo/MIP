
#define  RefreshViewHight 75.0f

#define kRefreshDistance    50.0f

#define kStandardHeight     70.0f

#define kReachToBottomMargin        100.0f

#import "CustomRefreshControl.h"


#define TEXT_COLOR	 [UIColor colorWithRed:87.0/255.0 green:108.0/255.0 blue:137.0/255.0 alpha:1.0]
#define FLIP_ANIMATION_DURATION 0.18f


@interface CustomRefreshControl (Private)

- (void)setFootState:(PullRefreshState)aState;
- (void)setHeadState:(PushRefreshState)aState;
@end

@implementation CustomRefreshControl

@synthesize delegate=_delegate;


@synthesize headerView              = _headerView;
@synthesize headerStatusLabel       = _headerStatusLabel;
@synthesize headerLastUpdatedLabel  = _headerLastUpdatedLabel;
@synthesize headerArrowImage        = _headerArrowImage;
@synthesize headerActivityView      = _headerActivityView;

@synthesize headerLoading           = _headerLoading;


@synthesize footerLoading           = _footerLoading;

@synthesize autoFooterView          = _autoFooterView;
@synthesize autoFooterStatusLabel   = _autoFooterStatusLabel;
@synthesize autoFooterActivityView  = _autoFooterActivityView;
@synthesize autoFooterLoading       = _autoFooterLoading;

//TODO: 创建下拉到阀值时,刷新的视图
- (UIView *)createHeaderViewWithFrame:(CGRect)frame {
    
    _headerView=[[UIView alloc]initWithFrame:frame];
    _headerView.backgroundColor = [UIColor colorWithRed:226.0/255.0 green:231.0/255.0 blue:237.0/255.0 alpha:1.0];
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(65, frame.size.height - kStandardHeight + 35, 190, 20)];
    label.font = [UIFont systemFontOfSize:12.0f];
    label.textColor = TEXT_COLOR;
    label.shadowColor = [UIColor colorWithWhite:0.9f alpha:1.0f];
    label.shadowOffset = CGSizeMake(0.0f, 1.0f);
    label.backgroundColor = [UIColor clearColor];
    label.textAlignment = UITextAlignmentCenter;
    [_headerView addSubview:label];
    _headerLastUpdatedLabel = label;//显示更新时间的UILabel
    [label release];
    
    label = [[UILabel alloc] initWithFrame:CGRectMake(65, frame.size.height - kStandardHeight + 10, 190, 30)];
    label.font = [UIFont boldSystemFontOfSize:13.0f];
    label.textColor = TEXT_COLOR;
    label.shadowColor = [UIColor colorWithWhite:0.9f alpha:1.0f];
    label.shadowOffset = CGSizeMake(0.0f, 1.0f);
    label.backgroundColor = [UIColor clearColor];
    label.textAlignment = UITextAlignmentCenter;
    [_headerView addSubview:label];
    _headerStatusLabel=label;//显示当前下拉状态的UILabel
    [label release];
    
    CALayer *layer = [CALayer layer];
    layer.frame = CGRectMake(20, frame.size.height - kStandardHeight + 7, 15.0f, 30.0f);
    layer.contentsGravity = kCAGravityResizeAspect;
    
    layer.contents = (id)[UIImage imageNamed:@"Sandglass.bundle/refresh_arrow.png"].CGImage;
    
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_4_0
    if ([[UIScreen mainScreen] respondsToSelector:@selector(scale)]) {
        layer.contentsScale = [[UIScreen mainScreen] scale];
    }
#endif
    
    [[_headerView layer] addSublayer:layer];
    _headerArrowImage=layer;
    
    UIActivityIndicatorView *view = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    view.frame = CGRectMake(20, frame.size.height - kStandardHeight + 15, 20.0f, 20.0f);
    [_headerView addSubview:view];
    _headerActivityView = view;
    [view release];
    
    [self setHeadState:PushRefreshNormal];
    
    return _headerView;
}

//TODO: 创建手动上拉到阀值时,加载更多的信息视图
- (UIView *)createFooterViewWithFrame:(CGRect)frame {
    
    //下表头的
    _footerView=[[UIView alloc]initWithFrame:frame];
    _footerView.autoresizingMask = UIViewAutoresizingFlexibleWidth;
    _footerView.backgroundColor = [UIColor colorWithRed:226.0/255.0 green:231.0/255.0 blue:237.0/255.0 alpha:1.0];
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0.0f, RefreshViewHight - 30.0f, frame.size.width, 20.0f)];
    label.autoresizingMask = UIViewAutoresizingFlexibleWidth;
    label.font = [UIFont systemFontOfSize:12.0f];
    label.textColor = TEXT_COLOR;
    label.shadowColor = [UIColor colorWithWhite:0.9f alpha:1.0f];
    label.shadowOffset = CGSizeMake(0.0f, 1.0f);
    label.backgroundColor = [UIColor clearColor];
    label.textAlignment = UITextAlignmentCenter;
    [_footerView addSubview:label];
    _footerLastUpdatedLabel=label;
    [label release];
    
    label = [[UILabel alloc] initWithFrame:CGRectMake(0.0f, RefreshViewHight - 48.0f, frame.size.width, 20.0f)];
    label.autoresizingMask = UIViewAutoresizingFlexibleWidth;
    label.font = [UIFont boldSystemFontOfSize:13.0f];
    label.textColor = TEXT_COLOR;
    label.shadowColor = [UIColor colorWithWhite:0.9f alpha:1.0f];
    label.shadowOffset = CGSizeMake(0.0f, 1.0f);
    label.backgroundColor = [UIColor clearColor];
    label.textAlignment = UITextAlignmentCenter;
    [_footerView addSubview:label];
    _footerStatusLabel=label;
    [label release];
    
    CALayer *layer = [CALayer layer];
    layer.frame = CGRectMake(25.0f, RefreshViewHight - RefreshViewHight, 30.0f, 55.0f);
    layer.contentsGravity = kCAGravityResizeAspect;
    //layer.contents = (id)[CommonUtility imageNamedFromContentFile:@"blueArrow1.png"].CGImage;
    
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_4_0
    if ([[UIScreen mainScreen] respondsToSelector:@selector(scale)]) {
        layer.contentsScale = [[UIScreen mainScreen] scale];
    }
#endif
    
    [[_footerView layer] addSublayer:layer];
    _footerArrowImage=layer;
    
    UIActivityIndicatorView *view = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    view.frame = CGRectMake(25.0f, RefreshViewHight - 38.0f, 20.0f, 20.0f);
    [_footerView addSubview:view];
    _footerActivityView = view;
    [view release];
    
    //[self addSubview:_footerView];
    
    [_footerView release];
    
    [self setFootState:PullRefreshNormal];
    
    return nil;
}

//TODO: 创建上拉到阀值时,自动加载的视图
- (UIView *)createAutoFooterViewWithFrame:(CGRect)frame {
    
    _autoFooterView = [[UIView alloc]initWithFrame:frame];
    _autoFooterView.backgroundColor = [UIColor colorWithRed:226.0/255.0 green:231.0/255.0 blue:237.0/255.0 alpha:1.0];
    
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(65, frame.size.height - kStandardHeight + 10, 190, 30)];
    label.font = [UIFont boldSystemFontOfSize:13.0f];
    label.textColor = TEXT_COLOR;
    label.shadowColor = [UIColor colorWithWhite:0.9f alpha:1.0f];
    label.shadowOffset = CGSizeMake(0.0f, 1.0f);
    label.backgroundColor = [UIColor clearColor];
    label.textAlignment = UITextAlignmentCenter;
    [_autoFooterView addSubview:label];
    _autoFooterStatusLabel=label;//显示当前下拉状态的UILabel
    [label release];
    
    UIActivityIndicatorView *view = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    view.frame = CGRectMake(20, frame.size.height - kStandardHeight + 25, 20.0f, 20.0f);
    [_autoFooterView addSubview:view];
    _headerActivityView = view;
    [view release];
    
    [self setHeadState:PushRefreshNormal];
    
    return _autoFooterView;
}

#pragma mark -
#pragma mark Setters

//TODO: 获取上次下拉的刷新时间,通过refreshTableHeaderDataSourceLastUpdated:代理方法获取
- (void)refreshHeaderLastUpdatedDate {
	
    NSDate *date = nil;
    
	if (_delegate && [_delegate respondsToSelector:@selector(refreshTableHeaderDataSourceLastUpdated:)]) {
		
		date = [_delegate refreshTableHeaderDataSourceLastUpdated:self];
        
        if (!date) {
            
            date = [NSDate date];
        }	
	} else {
		
		date = [NSDate date];
	}
    
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setAMSymbol:@"上午"];
    [formatter setPMSymbol:@"下午"];
    [formatter setDateFormat:@"yyyy/MM/dd a hh:mm"];
    _headerLastUpdatedLabel.text = [NSString stringWithFormat:@"最后更新: %@", [formatter stringFromDate:date]];
    
    [formatter release];
}

//TODO: 获取上次上拉的刷新时间,通过refreshTableFooterDataSourceLastUpdated:代理方法获取
- (void)refreshFooterLastUpdatedDate {
    
    NSDate *date = nil;
    
	if ([_delegate respondsToSelector:@selector(refreshTableFooterDataSourceLastUpdated:)]) {
		
		date = [_delegate refreshTableHeaderDataSourceLastUpdated:self];
        
        if (!date) {
            
            date = [NSDate date];
        }	
	} else {
		
		date = [NSDate date];
	}
    
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setAMSymbol:@"上午"];
    [formatter setPMSymbol:@"下午"];
    [formatter setDateFormat:@"yyyy/MM/dd a hh:mm"];
    _footerLastUpdatedLabel.text = [NSString stringWithFormat:@"最后更新: %@", [formatter stringFromDate:date]];
    [formatter release];
}

//TODO: 设置下拉刷新的状态
- (void)setHeadState:(PushRefreshState)aState{
	switch (aState) {
		case PushRefreshPushing:
			_headerStatusLabel.text = NSLocalizedString(@"松开即可更新...", @"松开即可更新...");
			[CATransaction begin];
			[CATransaction setAnimationDuration:FLIP_ANIMATION_DURATION];
			_headerArrowImage.transform = CATransform3DMakeRotation((M_PI / 180.0) * 180.0f, 0.0f, 0.0f, 1.0f);   //箭头旋转
			[CATransaction commit];
			break;
		case PushRefreshNormal:
			if (headerState == PushRefreshPushing) {
				[CATransaction begin];
				[CATransaction setAnimationDuration:FLIP_ANIMATION_DURATION];
				_headerArrowImage.transform = CATransform3DIdentity;
				[CATransaction commit];
			}
			_headerStatusLabel.text = NSLocalizedString(@"下拉即可更新...", @"下拉即可更新...");
			[_headerActivityView stopAnimating];
			[CATransaction begin];
			[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions]; 
			_headerArrowImage.hidden = NO;
			_headerArrowImage.transform = CATransform3DIdentity;
			[CATransaction commit];
			
			break;
		case PushRefreshLoading:
			_headerStatusLabel.text = NSLocalizedString(@"加载中...", @"加载中...");
			[_headerActivityView startAnimating];
			[CATransaction begin];
			[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions]; 
			_headerArrowImage.hidden = YES;
			[CATransaction commit];
			break;	
		default:
			break;
	}
	
	headerState = aState;	
}

//TODO: 设置上拉刷新的状态
- (void)setFootState:(PullRefreshState)aState{
	
	switch (aState) {
		case PullRefreshPulling:
			
			_footerStatusLabel.text = NSLocalizedString(@"松开即可更新...", @"松开即可更新...");
			[CATransaction begin];
			[CATransaction setAnimationDuration:FLIP_ANIMATION_DURATION];
			_footerArrowImage.transform = CATransform3DMakeRotation((M_PI / 180.0) * 180.0f, 0.0f, 0.0f, 1.0f);   //箭头旋转
			[CATransaction commit];
			
			break;
		case PullRefreshNormal:
			
			if (footerState == PullRefreshPulling) {
				[CATransaction begin];
				[CATransaction setAnimationDuration:FLIP_ANIMATION_DURATION];
				_footerArrowImage.transform = CATransform3DIdentity;
				[CATransaction commit];
			}
			
			_footerStatusLabel.text = NSLocalizedString(@"上拉即可更新...", @"上拉即可更新...");
			[_footerActivityView stopAnimating];
			[CATransaction begin];
			[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions]; 
			_footerArrowImage.hidden = NO;
			_footerArrowImage.transform = CATransform3DIdentity;
			[CATransaction commit];
			
			break;
		case PullRefreshLoading:
			
			_footerStatusLabel.text = NSLocalizedString(@"加载中...", @"加载中...");
			[_footerActivityView startAnimating];
			[CATransaction begin];
			[CATransaction setValue:(id)kCFBooleanTrue forKey:kCATransactionDisableActions]; 
			_footerArrowImage.hidden = YES;
			[CATransaction commit];
			
			break;
		default:
			break;
	}
	
	footerState = aState;
}



#pragma mark -
#pragma mark ScrollView Methods

//手指屏幕上不断拖动调用此方法
- (void)refreshScrollViewDidScroll:(UIScrollView *)scrollView {	
    
    switch (headerState) {
            
        case PushRefreshNormal: {
            
            if (scrollView.contentOffset.y <= -kRefreshDistance) {
                
                [self setHeadState:PushRefreshPushing];
            }
        }
            
            break;
        case PushRefreshPushing: {
            
            if (scrollView.contentOffset.y > -kRefreshDistance) {
                
                [self setHeadState:PushRefreshNormal];
            }
        }
            
            break;
            
        default:
            break;
    }
    
   /* if (_autoFooterView && !_headerLoading && !_footerLoading && !_autoFooterLoading&& scrollView.contentSize.height - kReachToBottomMargin < (scrollView.contentOffset.y+scrollView.bounds.size.height)) {
        
        _autoFooterLoading = YES;
        
        [_autoFooterActivityView startAnimating];
		[UIView beginAnimations:nil context:NULL];
		[UIView setAnimationDuration:0.2];
		scrollView.contentInset = UIEdgeInsetsMake(0, 0.0f, 70.0f, 0.0f);
		[UIView commitAnimations];
        
        _autoFooterView.hidden = NO;
        
        if ([_delegate respondsToSelector:@selector(autoRefreshTableFooterDidTriggerRefresh:)]) {
            
            [_delegate autoRefreshTableFooterDidTriggerRefresh:self];
        }
    }*/
    
    
    
	/*if (footerState == PullRefreshLoading) {
		
        //		CGFloat offset = MAX(scrollView.contentOffset.y * -1, 0);
        //		offset = MIN(offset, 60);
	}
	else if (headerState == PushRefreshLoading){
	}
    
	else if (scrollView.isDragging) {
		
		BOOL loadFooter = NO;
		if ([_delegate respondsToSelector:@selector(refreshTableFooterDataSourceIsLoading:)]) {
			loadFooter = [_delegate refreshTableFooterDataSourceIsLoading:self];
		}
		BOOL loadHeader = NO;
		if ([_delegate respondsToSelector:@selector(refreshTableFooterDataSourceIsLoading:)]) {
			loadHeader = [_delegate refreshTableHeaderDataSourceIsLoading:self];
		}
		
		if (footerState == PullRefreshPulling && scrollView.contentOffset.y + (scrollView.frame.size.height) < scrollView.contentSize.height + RefreshViewHight && !loadFooter) {
			[self setFootState:PullRefreshNormal];
		}
		else if(footerState == PullRefreshNormal && scrollView.contentOffset.y + (scrollView.frame.size.height) > scrollView.contentSize.height + RefreshViewHight && !loadFooter){
			[self setFootState:PullRefreshPulling];
		}
		else if(headerState == PushRefreshNormal && scrollView.contentOffset.y<-60 && scrollView.contentOffset.y<0 && !loadHeader) {
			[self setHeadState:PushRefreshPushing];
		}
		else if(headerState == PushRefreshPushing && scrollView.contentOffset.y>-60 && scrollView.contentOffset.y<0 && !loadHeader){
			[self setHeadState:PushRefreshNormal];
		}
        
		if (scrollView.contentInset.bottom != 0||scrollView.contentInset.top != 0) {
			scrollView.contentInset = UIEdgeInsetsZero;
		}
		
	}*/
	
}

//当用户停止拖动，并且手指从屏幕中拿开的的时候调用此方法
- (void)refreshScrollViewDidEndDragging:(UIScrollView *)scrollView {
    
    if (_headerView && !_headerLoading && !_footerLoading && !_autoFooterLoading && scrollView.contentOffset.y < - kRefreshDistance) {

        _headerLoading = YES;
        [self setHeadState:PushRefreshLoading];
		[UIView beginAnimations:nil context:NULL];
		[UIView setAnimationDuration:0.2];
		scrollView.contentInset = UIEdgeInsetsMake(70, 0.0f, 0.0f, 0.0f);
		[UIView commitAnimations];
        
        if ([_delegate respondsToSelector:@selector(refreshTableHeaderDidTriggerRefresh:)]) {
			[_delegate refreshTableHeaderDidTriggerRefresh:self];
		}
    }
    
    
    
    
    
	/*BOOL loadFooter = NO;
	if ([_delegate respondsToSelector:@selector(refreshTableFooterDataSourceIsLoading:)]) {
		loadFooter = [_delegate refreshTableFooterDataSourceIsLoading:self];
	}
	BOOL loadHeader = NO;
	if ([_delegate respondsToSelector:@selector(refreshTableHeaderDataSourceIsLoading:)]) {
		loadHeader = [_delegate refreshTableHeaderDataSourceIsLoading:self];
	}
    //注意这边的判断，要根据实际情况而作，主要时因为contentSize
	if (footerState == PullRefreshPulling && scrollView.contentOffset.y + (scrollView.frame.size.height) > scrollView.contentSize.height + 30.0 && scrollView.contentOffset.y > 0 && !loadFooter){
        
        
//        (footerState == PullRefreshPulling && scrollView.contentOffset.y + (scrollView.frame.size.height) > scrollView.contentSize.height + RefreshViewHight && scrollView.contentOffset.y > 0 && scrollView.contentSize.height >906 && !loadFooter)
		
		//[self setFootState:PullRefreshLoading];
		[UIView beginAnimations:nil context:NULL];
		[UIView setAnimationDuration:0.2];
		scrollView.contentInset = UIEdgeInsetsMake(0.0f, 0.0f, 0.0f, 0.0f);
		[UIView commitAnimations];
        
        if ([_delegate respondsToSelector:@selector(refreshTableFooterDidTriggerRefresh:)]) {
			[_delegate refreshTableFooterDidTriggerRefresh:self];
		}
		
	}
	else if (headerState == PushRefreshPushing && scrollView.contentOffset.y<-60 && !loadHeader){
		
		[self setHeadState:PushRefreshLoading];
		[UIView beginAnimations:nil context:NULL];
		[UIView setAnimationDuration:0.2];
		scrollView.contentInset = UIEdgeInsetsMake(RefreshViewHight, 0.0f, 0.0f, 0.0f);
		[UIView commitAnimations];
        
        if ([_delegate respondsToSelector:@selector(refreshTableHeaderDidTriggerRefresh:)]) {
			[_delegate refreshTableHeaderDidTriggerRefresh:self];
		}
	}
	else if(headerState == PushRefreshNormal && scrollView.contentOffset.y>-60 && !loadHeader){
		[UIView beginAnimations:nil context:NULL];
		[UIView setAnimationDuration:.3];
		[scrollView setContentInset:UIEdgeInsetsMake(0.0f, 0.0f, 0.0f, 0.0f)];
		[UIView commitAnimations];
	}
    
	*/
}

//当页面刷新完毕调用此方法，[delegate refreshScrollViewDataSourceDidFinishedLoading: scrollView];
- (void)refreshScrollViewDataSourceDidFinishedFooterLoading:(UIScrollView *)scrollView{	
    
    [UIView animateWithDuration:0.5 animations:^{
        
        [scrollView setContentInset:UIEdgeInsetsMake(0.0f, 0.0f, 0.0f, 0.0f)];
        
    } completion:^(BOOL finished) {
        
        _footerLoading = NO;
        [self setFootState:PullRefreshNormal];
        [self refreshFooterLastUpdatedDate];
    }];

}
- (void)refreshScrollViewDataSourceDidFinishedHeaderLoading:(UIScrollView *)scrollView{
	
    [UIView animateWithDuration:0.5 animations:^{
        
        [scrollView setContentInset:UIEdgeInsetsMake(0.0f, 0.0f, 0.0f, 0.0f)];
        
    } completion:^(BOOL finished) {
        
        _headerLoading = NO;
        [self setHeadState:PushRefreshNormal];
        [self refreshHeaderLastUpdatedDate];
    }];
    
}

- (void)autoRefreshScrollViewDataSourceDidFinishedFooterLoading:(UIScrollView *)scrollView {
    
    [UIView animateWithDuration:0.5f animations:^{
        
        [scrollView setContentInset:UIEdgeInsetsMake(0.0f, 0.0f, 0.0f, 0.0f)];
        
    } completion:^(BOOL finished) {
        
        _autoFooterLoading = NO;
        [_autoFooterActivityView stopAnimating];
        _autoFooterView.hidden = YES;
    }]; 
}

#pragma mark -
#pragma mark Dealloc

- (void)dealloc {
    
    _delegate = nil;
    
    [_headerView release];
    
    [_autoFooterView release];
    
	_headerLastUpdatedLabel =   nil;
    _headerStatusLabel      =   nil;
	_headerArrowImage       =   nil;
    _headerActivityView     =   nil;
    
	_footerLastUpdatedLabel =   nil;
	_footerStatusLabel      =   nil;
	_footerArrowImage       =   nil;
	_footerActivityView     =   nil;
    
    
    _autoFooterView         =   nil;
    _autoFooterStatusLabel  =   nil;
    _autoFooterActivityView =   nil;
	
    [super dealloc];
}


@end
