//
//  AbstractRequestComponent.m
//  Common
//
//  Created by wang hao on 13-9-3.
//  Copyright (c) 2013年 __MyCompanyName__. All rights reserved.
//

#import "AbstractRequestComponent.h"

@interface AbstractRequestComponent()


//隐藏AlertView进度条
-(void)hideAlertLoadingProgressView:(BOOL)flag;


//显示alertView进度条具体下载的字节数
-(void)updateAlertProgressBytesInTotal:(long long)size;

@end

@implementation AbstractRequestComponent

@synthesize progressAlertView;
@synthesize progressView;
@synthesize progressText;

//析购方法，释放内存
-(void)dealloc {
    
    [_request release];
    
    _request = nil;
    
    [super dealloc];
}

/*!
 @function	
 @abstract      初始化网络请求
 
 @param         request                 已经完成初始化的请求
 
 @result      
 */
-(id)initWithASIHTTPRequest:(ASIHTTPRequest *)request{
    
    self = [super init];
    
    if (self) {
        
        _request = [request retain];
        
//        _request.delegate = self;
        
    }
    
    return self;
}



/*!
 @function	
 @abstract      执行网络请求
 
 @param     
 
 @result      
 */
-(NSError *)executeRequest{
    
    [_request startAsynchronous];
    
    return nil;
}



/*!
 @function	
 @abstract      取消网络请求
 
 @param         request             需要取消的网络请求
 
 @result      
 */
-(void)cancelRequest:(ASIHTTPRequest *)request{
    
    [request clearDelegatesAndCancel];
    
}



/*!
 @function	
 @abstract      创建AlertView类型进度条
 
 @param     
 
 @result      
 */
- (void)creatAlertViewForProgress{
    //空方法 子类需要复写该方法
    //上传下载样式不同
    
}



/*!
 @function	
 @abstract      格式化进度条数字样式的方法
 
 @param         size                需要格式化的数字
 
 @result        格式化后的字符串   如 XXXKB XXXMB
 */
-(NSString*)formatSize:(long long)size{
    const float byte = 1024.0;
    
    NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];
    [formatter setNumberStyle:NSNumberFormatterDecimalStyle];
    [formatter setPositiveFormat:@"##0.00"];
    
    NSString *formatterSize= nil;
    if (size <= 0) 
		formatterSize = @"0";
	else if (size > 0 && size < byte) //当数据大小范围在1-1024时，使用Bytes
        formatterSize = [NSString stringWithFormat:@"%llu Bytes", size];
    else if (size >= byte && size < pow(byte, 2)) //当数据大小范围在1024-1024*1024时，使用KB
        formatterSize = [NSString stringWithFormat:@"%@ KB", [formatter stringFromNumber:[NSNumber numberWithFloat:(size/1.0/byte)]]];
    else if (size >= pow(byte, 2) && size < pow(byte, 3))//当数据大小范围在1024*1024-1024*1024*1024时，使用MB
        formatterSize = [NSString stringWithFormat:@"%@ MB", [formatter stringFromNumber:[NSNumber numberWithFloat:(size/1.0/pow(byte, 2))]]];
    else if (size >= pow(byte, 3)) //依次类推到GB
        formatterSize = [NSString stringWithFormat:@"%@ GB", [formatter stringFromNumber:[NSNumber numberWithFloat:(size/1.0/pow(byte, 3))]]];
	
    [formatter release];
    
    return formatterSize;
}



#pragma mark -ASIHTTPRequestDelegate
/*!
 @function	
 @abstract      ASIHTTPRequestDelegate回调，在接受报文头后的处理
 
 @param         responseHeaders         返回HTTP头 
 @param         request                 请求   
 
 @result      
 */
-(void)request:(ASIHTTPRequest *)request didReceiveResponseHeaders:(NSDictionary *)responseHeaders{

    //空方法 子类需要复写该方法
}



/*!
 @function	
 @abstract      ASIHTTPRequestDelegate回调，请求完成后处理
 
 @param         request                 请求 
 
 @result      
 */
-(void)requestFinished:(ASIHTTPRequest *)request{
    //空方法 子类需要复写该方法
}



/*!
 @function	
 @abstract      ASIHTTPRequestDelegate回调，请求失败后处理
 
 @param         request                 请求  
 
 @result      
 */
- (void)requestFailed:(ASIHTTPRequest *)request{
    //空方法 子类需要复写该方法
}



#pragma mark -
#pragma mark 接收到http响应

/*!
 @function	
 @abstract      更新进度条数字的方法
 
 @param         request                 返回的请求数据
 @param         size                    返回的数据大小
 
 @result     
 */
-(void)showRequest:(ASIHTTPRequest *)request bytesInTotal:(long long)size {
    
    [self updateAlertProgressBytesInTotal:size];
}



/*!
 @function
 @abstract      隐藏进度条
 
 @param         request                 返回的请求数据
 @param         flag                    成功标志位
 
 @result
 */
-(void)hideLoadingProgressView:(ASIHTTPRequest *)request success:(BOOL)flag {
    
    [self hideAlertLoadingProgressView:flag];
}



/*!
 @function
 @abstract      更新alertView进度条具体下载的字节数
 
 @param         size                    返回的请求数据
 @param         flag                    成功标志位
 
 @result
 */
-(void)updateAlertProgressBytesInTotal:(long long)size {
    
    NSString *partial = [self formatSize:size];
    
    if (_totalSize) {
        
        NSString *total   = [self formatSize:_totalSize];
        
        self.progressText.text = [NSString stringWithFormat:@"%@ / %@", partial, total];
        self.progressView.progress = size/(float)_totalSize;
    }
    else {
        
        self.progressText.text = [NSString stringWithFormat:@"%@", partial];
    }
}



/*!
 @function
 @abstract      下载完毕后隐藏AlertView进度条
 
 @param
 
 @result
 */
//TODO: 下载完毕后隐藏AlertView进度条
-(void)hideAlertLoadingProgressView:(BOOL)flag {
//    [self.progressAlertView dismissWithClickedButtonIndex:0 animated:YES];
    [[self.progressAlertView subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];
//    [self.progressAlertView dismissAlertView];
    [self.progressAlertView removeFromSuperview];
    
    self.progressAlertView  = nil;
    self.progressView       = nil;
    self.progressText       = nil;
}

#pragma mark-
#pragma mark 取消当前网络请求

/*!
 @function
 @abstract      点击AlertView上的取消按钮，取消下载，隐藏下载页面
 
 @param
 
 @result
 */
-(void)cancelCurrentRequest {
    
    [self cancelRequest:_request];
    
    [self hideLoadingProgressView:_request success:NO];
    
}
@end
