//
//  CustomSegmentedControl.m
//  DocTrans
//
//  Created by Sea on 13-10-15.
//  Copyright (c) 2013年 Sea. All rights reserved.
//

#import "CustomSegmentedControl.h"

#import <QuartzCore/QuartzCore.h>

@implementation CustomSegmentedControl

@synthesize backgroundImage;

@synthesize sliderImage;

@synthesize selectedButtonIndex;

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        
        selectedButtonIndex = SegmentIndexNotFound;
        
        self.backgroundColor = [UIColor clearColor];
    }
    return self;
}

- (void)dealloc {
    
    [_buttonArrays release];
    _buttonArrays = nil;
    
    [super dealloc];
}


/*!
 @function
 @abstract      设置视图背景图片的属性
 
 @param         backgroundImage         需要设置的背景图片
 
 @result
 */
- (void)setBackgroundImage:(UIImage *)nBackgroundImage {
    
    if (backgroundImage != nBackgroundImage) {      //如果目前的图片与新设置的图片相同，则不再设置背景图片
        
        [backgroundImage release];
        
        backgroundImage = [nBackgroundImage retain];
        
        if (!_backgroundLayer) {
            
            _backgroundLayer = [CALayer layer];//如果背景图层不存在,则创建该图层
            
            _backgroundLayer.frame = self.layer.bounds;//设置其大小与源视图大小一致
            
            [self.layer addSublayer:_backgroundLayer];
        }
        
        //判断背景图片的尺寸是否与背景图的尺寸一致,如果一致,则直接设置;如果不一致:1.图片尺寸 > 源视图,直接设置,图片将被压缩; 2.图片尺寸 < 源视图,保持图片两端不变,将源图四周切除2个像素后的图片作为源像素,进行补充
        
        if (CGSizeEqualToSize(_backgroundLayer.frame.size, backgroundImage.size)) {
            
            _backgroundLayer.contents = (id)backgroundImage.CGImage;
        }
        else {
            
            UIImage *newImage = [backgroundImage resizableImageWithCapInsets:UIEdgeInsetsMake(2, 2, 2, 2)];
            
            _backgroundLayer.contents = (id)newImage.CGImage;
        }
    }
}



/*!
 @function
 @abstract      设置按钮滑块背景图片的属性
 
 @param         sliderImage             需要设置的背景图片
 
 @result
 */
- (void)setSliderImage:(UIImage *)nSliderImage {
    
    if (sliderImage != nSliderImage) {      //如果目前的图片与新设置的图片相同，则不再设置背景图片
        
        [sliderImage release];
        
        sliderImage = [nSliderImage retain];
        
        if (!_sliderLayer) {
            
            _sliderLayer = [CALayer layer];//如果背景图层不存在,则创建该图层
            
            _sliderLayer.frame = CGRectZero;//由于目前还无法计算滑块的尺寸,等使用者将按钮添加完毕后,在绘制时,根据按钮个数与控件大小,计算滑块尺寸
            
            if (_backgroundLayer) {
                
                [_backgroundLayer addSublayer:_sliderLayer];//如果存在背景图片,则需要将滑块图片放置于背景图层上,以保证背景图层在最下面
            }
            else {
                [self.layer addSublayer:_sliderLayer];
            }
        }
        
        //判断滑块图片的尺寸是否与背景图的尺寸一致,如果一致,则直接设置;如果不一致:1.图片尺寸 > 源视图,直接设置,图片将被压缩; 2.图片尺寸 < 源视图,保持图片两端不变,将源图四周切除2个像素后的图片作为源像素,进行补充
        
        if (CGSizeEqualToSize(_sliderLayer.frame.size, sliderImage.size)) {
            
            _sliderLayer.contents = (id)sliderImage.CGImage;
        }
        else {
            
            UIImage *newImage = [sliderImage resizableImageWithCapInsets:UIEdgeInsetsMake(0, 10, 0, 10)];
            
            _sliderLayer.contents = (id)newImage.CGImage;
        }
    }
}



- (void)setSelectedButtonIndex:(NSInteger)nSelectedButtonIndex {
        
    UIButton *selectedButton = [_buttonArrays objectAtIndex:nSelectedButtonIndex];
        
    selectedButton.selected = YES;
    selectedButton.userInteractionEnabled = NO;
    
    if (self.selectedButtonIndex != SegmentIndexNotFound) {
        
        UIButton *lastSelectedButton = [_buttonArrays objectAtIndex:self.selectedButtonIndex];
        
        lastSelectedButton.selected = NO;
        lastSelectedButton.userInteractionEnabled = YES;
    }

    selectedButtonIndex = nSelectedButtonIndex;
}



/*!
 @function
 @abstract      设置视图背景图片的属性
 
 @param         index                   按钮的索引号
 
 @result        返回索引对应的button对象
 */
- (UIButton *)buttonAtIndex:(NSInteger)index {
    
    if (_buttonArrays.count > index) {
        
        return [_buttonArrays objectAtIndex:index];
    }
    
    return nil;
}


- (UIButton *)insertButton {
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [button addTarget:self action:@selector(sliderByButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
    
    [self addSubview:button];
    
    if (!_buttonArrays) {
        
        _buttonArrays = [[NSMutableArray alloc] initWithObjects:button, nil];
    }
    else
        [_buttonArrays addObject:button];
    
    [self setNeedsDisplay];
    
    return button;
}

/*!
 @function
 @abstract      设置视图背景图片的属性
 
 @param         target                  按钮事件的接收目标
 @param         action                  按钮事件的动作对象
 
 @note          创建的按钮按照自定义segmentedControl的大小平均放置,无需设置尺寸
 
 @result        返回创建完成的button对象
 */
- (UIButton *)insertButtonWithTarget:(id)target action:(SEL)action {
    
    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [button addTarget:self action:@selector(sliderByButtonClicked:) forControlEvents:UIControlEventTouchUpInside];
    
    if (target && action != NULL) {
        
        [button addTarget:target action:action forControlEvents:UIControlEventTouchUpInside];
    }
    
    [self addSubview:button];
    
    if (!_buttonArrays) {
        
        _buttonArrays = [[NSMutableArray alloc] initWithObjects:button, nil];
    }
    else
        [_buttonArrays addObject:button];
    
    [self setNeedsDisplay];
    
    return button;
}



/*!
 @function
 @abstract      当按钮被点击时,其底色图片需滑动到对应按钮的正下方
 
 @param         UIButton                当前被点击的按钮
 
 @result        
 */
- (void)sliderByButtonClicked:(UIButton *)sender {
    
    NSInteger index = [_buttonArrays indexOfObject:sender];
    
    self.selectedButtonIndex = index;
    
    if (_sliderLayer) {
        
        _sliderLayer.frame = sender.frame;
    }
}




// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
    
    NSInteger count = [_buttonArrays count];
    
    //根据按钮个数与自定义segmentedControl的宽度,计算每一个按钮的宽度
    double width = rect.size.width/count;
    
    //如果滑块的尺寸为设置,则根据按钮尺寸,设置滑块的尺寸
    if (CGRectIsEmpty(_sliderLayer.frame)) {
        
        _sliderLayer.frame = CGRectMake(0, 0, width, rect.size.height);
    }
    
    for (int i = 0; i < count; i++) {
        
        UIButton *btn = [_buttonArrays objectAtIndex:i];
        
        btn.frame = CGRectMake(width*i, 0, width, rect.size.height);
    }
    
    
    if (self.selectedButtonIndex == SegmentIndexNotFound) {
        
        self.selectedButtonIndex = 0;
    }
    
}

//设置默认选择项
- (void)setdefaultSelectButtonIndex:(NSInteger)index
{
    if (self.selectedButtonIndex != index) {
        
        [self sliderByButtonClicked:[self buttonAtIndex:index]];
    } 
}

@end
