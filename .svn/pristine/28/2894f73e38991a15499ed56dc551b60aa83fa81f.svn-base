//
//  CustomAlertView.m
//  CustomAlertView
//
//  Created by sea on 13-12-8.
//  Copyright (c) 2013年 sea. All rights reserved.
//

#import "CustomAlertController.h"

FOUNDATION_EXPORT   NSString    *const touchDownOutsideContentWillDismissNotification;

BOOL        keyboardIsAppearance;//暂时使用该变量标志键盘状态,待研究其他方式的标志,理论上应该存在系统标志

//提示框容器的视图
@interface AlertContainerView : UIView

@end


@implementation AlertContainerView


- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {
    
    if (self.subviews.count > 0) {
        
        UIView *view = [self.subviews objectAtIndex:0];
        
        if (!CGRectContainsPoint(view.frame, point)) {
            
            [[NSNotificationCenter defaultCenter] postNotificationName:touchDownOutsideContentWillDismissNotification object:nil];
        }
    }
    
    return [super pointInside:point withEvent:event];
}

@end



//提示框容器视图控制器
@interface AlertContainerViewController : UIViewController

@property (nonatomic, retain)UIViewController *contentViewController;

@end

@implementation AlertContainerViewController

@synthesize contentViewController;

- (void)dealloc {
    
    self.contentViewController = nil;
    
    [super dealloc];
}

- (void)loadView {
    
    AlertContainerView *view = [[AlertContainerView alloc] initWithFrame:CGRectMake(0, 0, 748, 1004)];
    
    self.view = view;
    
    [view release];
}

- (void)viewDidLoad {
    
    [super viewDidLoad];
    
#ifdef __IPHONE_6_0
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_6_0
    
    if (self.interfaceOrientation != UIInterfaceOrientationPortrait) {
     
        [self willRotateToInterfaceOrientation:self.interfaceOrientation duration:0.8];
    }
    
#endif
#endif
}

- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration {
    
//    [UIView animateWithDuration:duration animations:^{
    
        if (UIInterfaceOrientationIsLandscape(toInterfaceOrientation)) {
            
            self.view.frame = CGRectMake(0, 0, 1024, 748);
        }
        else {
            
            self.view.frame = CGRectMake(0, 0, 768, 1004);
        }
        
        if (!keyboardIsAppearance) {
            
            self.contentViewController.view.center = self.view.center;
        }
        
//    }];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation {
    
    return NO;
}

@end




#import "CustomAlertController+Animate.h"

#import <objc/runtime.h>

NSString *const touchDownOutsideContentWillDismissNotification  =   @"touchDownOutsideContentWillDismissNotification";

@implementation CustomAlertController

@synthesize contentViewController;

@synthesize touchDownOutsideContentWillDismiss;
@synthesize touchUpInsideFromButtonWillDismiss;

@synthesize animateStyle;

- (void)setTouchDownOutsideContentWillDismiss:(BOOL)nTouchDownOutsideContentWillDismiss {
    
    if (nTouchDownOutsideContentWillDismiss) {
        
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(touchDownOutsideContent) name:touchDownOutsideContentWillDismissNotification object:nil];
    }
    
    touchDownOutsideContentWillDismiss = nTouchDownOutsideContentWillDismiss;
}

- (id)init {
    
    self = [super init];
    
    if (self) {
        
        _containerWindow = [[UIWindow alloc] initWithFrame:CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, [UIScreen mainScreen].bounds.size.height)];
        
        _containerWindow.windowLevel = UIWindowLevelAlert;
        
        _containerWindow.backgroundColor = [UIColor clearColor];
        
        _containerViewController = [[AlertContainerViewController alloc] init];
        
        _containerWindow.rootViewController = _containerViewController;
        
        
        touchDownOutsideContentWillDismiss = NO;
        
        keyboardIsAppearance = NO;
        
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
    }
    
    return self;
}

- (id)initWithContentView:(UIView *)nContentView {
    
    self = [self init];
    
    if (self) {
        
        UIViewController *tmpViewController = [[UIViewController alloc] init];
        
        tmpViewController.view = nContentView;
        
        self.contentViewController = tmpViewController;
        ((AlertContainerViewController*)_containerViewController).contentViewController = tmpViewController;
        
        [tmpViewController release];
        
        nContentView.alertController = self;
        self.contentViewController.alertController = self;
        
//        self.contentViewController.view.center = _containerViewController.view.center;
        
        [_containerViewController addChildViewController:self.contentViewController];
        [_containerViewController.view addSubview:self.contentViewController.view];
    }
    
    return self;
}

- (id)initWithContentViewController:(UIViewController *)nContentViewController {
    
    self = [self init];
    
    if (self) {
        
        self.contentViewController = nContentViewController;
        
        self.contentViewController.alertController = self;
        
        ((AlertContainerViewController*)_containerViewController).contentViewController = nContentViewController;
        
//        self.contentViewController.view.center = _containerViewController.view.center;
        
        [_containerViewController addChildViewController:self.contentViewController];
        [_containerViewController.view addSubview:self.contentViewController.view];
    }
    
    return self;
}



- (void)touchDownOutsideContent {
    
    [self hide];
}



/*!
 @function
 @abstract      释放控件占有的资源
 
 @result
 */
- (void)dealloc {
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
    [_containerViewController release];
    _containerViewController = nil;
    
    [_containerWindow release];
    _containerWindow = nil;
    
    _originalWindow = nil;
    
    keyboardIsAppearance = NO;
    
    [super dealloc];
}



/*!
 @function
 @abstract      覆写系统展示方法,将alertView的尺寸设置为背景图片的尺寸
 
 @result
 */
- (void)setButtonDismissWhenTouchUpInside {
    
    dispatch_queue_t setButtonQueue;
    
    setButtonQueue = dispatch_queue_create("com.sea.CustomAlertControllerQueue", NULL);
    
    dispatch_async(setButtonQueue, ^{
        
        if (touchUpInsideFromButtonWillDismiss) {
            
            for (UIView *subview in [self.contentViewController.view subviews]) {
                
                if ([subview isKindOfClass:[UIButton class]]) {
                    
                    UIButton *button = (UIButton *)subview;
                    
                    NSArray *selectors = [button actionsForTarget:self forControlEvent:UIControlEventTouchUpInside];
                    
                    if (![selectors containsObject:NSStringFromSelector(@selector(hide))]) {//如果判断已经被手动添加过该事件,则不在重复加入
                        
                        [button addTarget:self action:@selector(hide) forControlEvents:UIControlEventTouchUpInside];
                    }
                }
            }
        }

    });
}



/*!
 @function
 @abstract      覆写系统展示方法,将alertView的尺寸设置为背景图片的尺寸
 
 @result
 */
- (void)show {
    
    [self retain];
    
    [self setButtonDismissWhenTouchUpInside];
    
        
    self.contentViewController.view.center = _containerViewController.view.center;
    
    _containerViewController.view.backgroundColor = [UIColor redColor];
    
    
    UIWindow *tmpWindow = [UIApplication sharedApplication].keyWindow;
    
    _originalWindowClass = object_getClass(tmpWindow);
    
    _originalWindow = tmpWindow;
    
    [[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];
    
    _containerViewController.view.backgroundColor = [UIColor colorWithRed:0.5 green:0.5 blue:0.5 alpha:0.5];
    
    switch (self.animateStyle) {
            
        case CustomAlertAnimateStyleDefault:
            
            [self showCustomAlertAnimateStyleDefault];
            
            break;
            
        case CustomAlertAnimateStyle1:
            
            [self showCustomAlertAnimateStyle1];
            
            break;
            
        default:
            break;
    }
    
}



/*!
 @function
 @abstract      让弹出的提示框消失
 
 @note          该方法在添加按钮的时候,由自定义类自己添加,无需手动调用
 
 @result
 */
- (void)hide {    
    
    
    switch (self.animateStyle) {
            
        case CustomAlertAnimateStyleDefault:
            
            [self hideCustomAlertAnimateStyleDefault];
            
            break;
            
        case CustomAlertAnimateStyle1:
            
            [self hideCustomAlertAnimateStyle1];
            
            break;
            
        default:
            break;
    }
}

// Handle keyboard show/hide changes
- (void)keyboardWillShow: (NSNotification *)notification
{
    keyboardIsAppearance = YES;
    
    UIView *contentView = self.contentViewController.view;
    
    CGSize screenSize = [UIScreen mainScreen].bounds.size;
    
    CGSize keyboardSize = [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size;
    
    CGSize contentViewSize = contentView.bounds.size;
    
    UIInterfaceOrientation interfaceOrientation = [[UIApplication sharedApplication] statusBarOrientation];
    if (UIInterfaceOrientationIsLandscape(interfaceOrientation)) {
        
        CGFloat tmp = screenSize.height;
        screenSize.height = screenSize.width;
        screenSize.width = tmp;
        
        tmp = keyboardSize.height;
        keyboardSize.height = keyboardSize.width;
        keyboardSize.width = tmp;

    }
    
    CGRect contentFrame = CGRectMake((screenSize.width - contentViewSize.width) / 2, (screenSize.height - keyboardSize.height - contentViewSize.height) / 2, contentViewSize.width, contentViewSize.height);
    
    [UIView animateWithDuration:0.2f delay:0.0 options:UIViewAnimationOptionTransitionNone
					 animations:^{
                         
                         contentView.frame = contentFrame;
					 }
					 completion:nil
	 ];

    
}

- (void)keyboardWillHide: (NSNotification *)notification
{
    
    keyboardIsAppearance = NO;
    
    UIView *contentView = self.contentViewController.view;
    
    CGSize screenSize = [UIScreen mainScreen].bounds.size;
    
    CGSize keyboardSize = [[[notification userInfo] objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
    
    CGSize contentViewSize = contentView.bounds.size;
    
    UIInterfaceOrientation interfaceOrientation = [[UIApplication sharedApplication] statusBarOrientation];
    if (UIInterfaceOrientationIsLandscape(interfaceOrientation)) {
        
        CGFloat tmp = screenSize.height;
        screenSize.height = screenSize.width;
        screenSize.width = tmp;
        
        tmp = keyboardSize.height;
        keyboardSize.height = keyboardSize.width;
        keyboardSize.width = tmp;
        
    }
    
    [UIView animateWithDuration:0.2f delay:0.0 options:UIViewAnimationOptionTransitionNone
					 animations:^{
                         contentView.frame = CGRectMake((screenSize.width - contentViewSize.width) / 2, (screenSize.height - contentViewSize.height) / 2, contentViewSize.width, contentViewSize.height);
					 }
					 completion:nil
	 ];
}



@end




#import <objc/runtime.h>

static char alertControllerInViewControllerKey;

@implementation UIViewController (AlertContentViewController)

- (void)setAlertController:(CustomAlertController *)nAlertController {
    
    objc_setAssociatedObject(self, &alertControllerInViewControllerKey, nAlertController, OBJC_ASSOCIATION_ASSIGN);
}

- (CustomAlertController *)alertController {
    
    return objc_getAssociatedObject(self, &alertControllerInViewControllerKey);
}
@end




static char alertControllerInViewKey;

@implementation UIView (AlertContentView)

- (void)setAlertController:(CustomAlertController *)nAlertController {
    
    objc_setAssociatedObject(self, &alertControllerInViewKey, nAlertController, OBJC_ASSOCIATION_ASSIGN);
}

- (CustomAlertController *)alertController {
    
    return objc_getAssociatedObject(self, &alertControllerInViewKey);
}
@end

