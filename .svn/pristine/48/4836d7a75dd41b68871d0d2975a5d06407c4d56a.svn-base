/* 
 * Copyright (c) 2009 Keith Lazuka
 * License: http://www.opensource.org/licenses/mit-license.html
 */

#import <CoreGraphics/CoreGraphics.h>
#import "KalMonthView.h"
#import "KalTileView.h"
#import "KalView.h"
#import "KalDate.h"
#import "KalPrivate.h"
#import "KalCommon.h"

//extern const CGSize kTileSize;

@implementation KalMonthView

@synthesize numWeeks,stateDictionary;
- (id)initWithFrame:(CGRect)frame
{
  if ((self = [super initWithFrame:frame])) {
    self.opaque = NO;
    self.clipsToBounds = YES;
    for (int i=0; i<6; i++) {
      for (int j=0; j<7; j++) {
        CGRect r = CGRectMake(j*kTileSize.width, i*kTileSize.height, kTileSize.width, kTileSize.height);
          KalTileView *tile = [[[KalTileView alloc] initWithFrame:r] autorelease];
          
          if (HEIGHT_CHANGE)
          {
               [tile tileBackgroundColor:tile];
          }
         
        [self addSubview:tile];
      }
    }
  }
  return self;
}

-(void)resumeTheTileSubview
{
    for (KalTileView *tile in [self subviews])
    {
        [tile resumeTheView];
    }
}


- (void)showDates:(NSArray *)mainDates leadingAdjacentDates:(NSArray *)leadingAdjacentDates trailingAdjacentDates:(NSArray *)trailingAdjacentDates
{
  int tileNum = 0;
  NSArray *dates[] = { leadingAdjacentDates, mainDates, trailingAdjacentDates };
    
    if (HEIGHT_CHANGE)
    {
        [self resumeTheTileSubview];
    }
  
  for (int i=0; i<3; i++)
  {
    for (KalDate *d in dates[i])
    {
      KalTileView *tile = [self.subviews objectAtIndex:tileNum];
//      [tile resetState];
        [tile resumeTheView];
      tile.date = d;
        if (i == 1 )
        {
            tile.mainDate = d;
        }

        [tile updateTheDateView:tile ];
      tile.type = dates[i] != mainDates
                    ? KalTileTypeAdjacent
                    : [d isToday] ? KalTileTypeToday : KalTileTypeRegular;
      tileNum++;
    }
  }
  
  numWeeks = ceilf(tileNum / 7.f);
    
    
    
  [self sizeToFit];
  [self setNeedsDisplay];
}

- (void)drawRect:(CGRect)rect
{
  CGContextRef ctx = UIGraphicsGetCurrentContext();
  CGContextDrawTiledImage(ctx, (CGRect){CGPointZero,kTileSize}, [[UIImage imageNamed:@"Kal.bundle/kal_tile.png"] CGImage]);
}

- (KalTileView *)firstTileOfMonth
{
  KalTileView *tile = nil;
  for (KalTileView *t in self.subviews)
  {
    if (!t.belongsToAdjacentMonth) {
      tile = t;
      break;
    }
  }
  
  return tile;
}

- (KalTileView *)tileForDate:(KalDate *)date
{
  KalTileView *tile = nil;
  for (KalTileView *t in self.subviews)
  {
    if ([t.date isEqual:date])
    {
      tile = t;
      break;
    }
  }
  NSAssert1(tile != nil, @"Failed to find corresponding tile for date %@", date);
  
  return tile;
}

- (void)sizeToFit
{
//  self.height = 1.f + kTileSize.height * numWeeks;
    
    if (HEIGHT_CHANGE)
    {
       self.height =  kTileSize.height * 6; 
    }
    else
    {
      self.height =  kTileSize.height * numWeeks;
    }
    
}

- (void)markTilesForDates:(NSArray *)dates
{
  for (KalTileView *tile in self.subviews)
    tile.marked = [dates containsObject:tile.date];
}




//lixiangai
-(void)updateSchduleState
{
    for ( KalTileView *tile in [self subviews])
    {
        NSDate *date = [tile.date NSDate];
        NSNumber *obj = [stateDictionary objectForKey:[date description]];
        tile.scheduleState = [obj integerValue];

        [tile updateTheDateView:tile ];
    }
    
}

@end
