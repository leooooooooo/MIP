/*
 * Copyright (c) 2009 Keith Lazuka
 * License: http://www.opensource.org/licenses/mit-license.html
 */

#import "KalView.h"
#import "KalGridView.h"
#import "KalLogic.h"
#import "KalPrivate.h"
#import "UIImage+CustomExtensions.h"
#import "UIColor+CustomExtensions.h"
#import "KalCommon.h"

#define ROWCHANGE  0

@interface KalView ()
- (void)addSubviewsToHeaderView:(UIView *)headerView;
- (void)addSubviewsToContentView:(UIView *)contentV;
- (void)setHeaderTitleText:(NSString *)text;
@end

static const CGFloat kHeaderHeight = 52.f;
static const CGFloat kMonthLabelHeight = 17.f;
//static const CGFloat cellHeight = 50;
//static const CGFloat cellWeight = 60;

@implementation KalView

@synthesize delegate, tableView,schduleDictionary;

- (id)initWithFrame:(CGRect)frame delegate:(id<KalViewDelegate>)theDelegate logic:(KalLogic *)theLogic
{
    if ((self = [super initWithFrame:frame])) {
        delegate = theDelegate;
        logic = [theLogic retain];
        [logic addObserver:self forKeyPath:@"selectedMonthNameAndYear" options:NSKeyValueObservingOptionNew context:NULL];
        self.autoresizesSubviews = YES;
        self.autoresizingMask = UIViewAutoresizingFlexibleHeight;
        
        headerView = [[[UIView alloc] initWithFrame:CGRectMake(0, 0, 425, kHeaderHeight)] autorelease];
        headerView.backgroundColor = [UIColor clearColor];
        [self addSubviewsToHeaderView:headerView];
        [self addSubview:headerView];
        
        contentView = [[[UIView alloc] initWithFrame:CGRectMake(5, kHeaderHeight+18, frame.size.width-5, frame.size.height - kHeaderHeight)] autorelease];
        contentView.autoresizingMask = UIViewAutoresizingFlexibleHeight;
        contentView.backgroundColor = [UIColor clearColor];
        [self addSubviewsToContentView:contentView];
        [self addSubview:contentView];
        
        UIButton *leftBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        leftBtn.frame = CGRectMake(80, 310, 40, 19);
        [leftBtn addTarget:self action:@selector(showPreviousMonth) forControlEvents:UIControlEventTouchUpInside];
        [leftBtn setBackgroundImage:[UIImage imageNamed:@"arrow_left.png" imageBundle:kKalCalendarBundle] forState:UIControlStateNormal];
        [contentView addSubview:leftBtn];
        
        UILabel *tagLab = [[UILabel alloc] initWithFrame:CGRectMake(135, 300, 150, 40)];
        tagLab.textColor = [UIColor colorWithHex:@"3c557f"];
        tagLab.text = @"点击左右箭头，切换月历";
        tagLab.font = [UIFont systemFontOfSize:12];
        tagLab.backgroundColor = [UIColor clearColor];
        tagLab.textAlignment = UITextAlignmentCenter;
        [contentView addSubview:tagLab];
        [tagLab release];
        
        UIButton *rightBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        rightBtn.frame = CGRectMake(300, 310, 40, 19);
        [rightBtn addTarget:self action:@selector(showFollowingMonth) forControlEvents:UIControlEventTouchUpInside];
        [rightBtn setBackgroundImage:[UIImage imageNamed:@"arrow_right.png" imageBundle:kKalCalendarBundle] forState:UIControlStateNormal];
        [contentView addSubview:rightBtn];
        
    }
    
    return self;
}

- (id)initWithFrame:(CGRect)frame
{
    [NSException raise:@"Incomplete initializer" format:@"KalView must be initialized with a delegate and a KalLogic. Use the initWithFrame:delegate:logic: method."];
    return nil;
}

- (void)redrawEntireMonth { [self jumpToSelectedMonth]; }

- (void)slideDown { [gridView slideDown]; }
- (void)slideUp { [gridView slideUp]; }
-(void)slideLeft { [gridView slideLeft]; }
-(void)slideRight{ [gridView slideRight]; }

-(void)showPreviousMonth
{
    
    if (!gridView.transitioning)
    {
        if (slideState == SLIDE_DOWN || slideState == SLIDE_UP)
        {
            [delegate showPreviousMonthSlideDown];
        }
        else
        {
            [delegate showPreviousMonthSlideRight];
            
        }
    }
    
}

-(void)showFollowingMonth
{
    if (!gridView.transitioning)
    {
        
        if (slideState == SLIDE_DOWN || slideState == SLIDE_UP )
        {
            [delegate showFollowingMonthSlideUp];
        }
        else
        {
            [delegate showFollowingMonthSlideLeft];
        }
        
    }
    
    
    
}

- (void)addSubviewsToHeaderView:(UIView *)headerV
{
    const CGFloat kChangeMonthButtonWidth = 80;
    const CGFloat kChangeMonthButtonHeight = 40;
    const CGFloat kMonthLabelWidth = 190.0f;
    const CGFloat kHeaderVerticalAdjust = 5.f;
    const CGFloat kheaderLabelHeight = 25;
    const CGFloat kHeaderLabelVerticalAdjust = 5.f;
    // Header background gradient
    
    /*
     UIImageView *backgroundView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"calendar_weekbg.png" imageBundle:kKalCalendarBundle]];
     CGRect imageFrame = headerV.frame;
     imageFrame.origin = CGPointZero;
     backgroundView.frame = imageFrame;
     [headerView addSubview:backgroundView];
     [backgroundView release];
     */
    
    // Create the previous month button on the left side of the view
    CGRect previousMonthButtonFrame = CGRectMake(5,
                                                 kHeaderVerticalAdjust,
                                                 kChangeMonthButtonWidth,
                                                 kChangeMonthButtonHeight);
    UIButton *previousMonthButton = [[UIButton alloc] initWithFrame:previousMonthButtonFrame];
    //  previousMonthButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentCenter;
    //  previousMonthButton.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [previousMonthButton addTarget:self action:@selector(showJumpDate:) forControlEvents:UIControlEventTouchUpInside];
    //    [previousMonthButton setBackgroundColor:[UIColor redColor]];
    [previousMonthButton setTitleColor:[UIColor colorWithRed:84/255.0 green:165/255.0 blue:242/255.0 alpha:1.0] forState:UIControlStateNormal];
    [previousMonthButton setTitle:@"跳转" forState:UIControlStateNormal];
    [previousMonthButton setBackgroundImage:[UIImage imageNamed:@"rectangle_bg.png" imageBundle:kKalCalendarBundle] forState:UIControlStateNormal];
    [headerView addSubview:previousMonthButton];
    [previousMonthButton release];
    
    
    // Draw the selected month name centered and at the top of the view
    CGRect monthLabelFrame = CGRectMake((headerView.width/2.0f) - (kMonthLabelWidth/2.0f) - 18,
                                        kHeaderLabelVerticalAdjust+10,
                                        kMonthLabelWidth,
                                        kheaderLabelHeight);
    headerTitleLabel = [[UILabel alloc] initWithFrame:monthLabelFrame];
    headerTitleLabel.backgroundColor = [UIColor clearColor];
    //  headerTitleLabel.font = [UIFont boldSystemFontOfSize:22.f];
    headerTitleLabel.textAlignment = UITextAlignmentCenter;
    //  headerTitleLabel.textColor = [UIColor whiteColor];;
    headerTitleLabel.textColor = [UIColor colorWithHex:@"3c557f"];
    //  headerTitleLabel.shadowColor = [UIColor whiteColor];
    //  headerTitleLabel.shadowOffset = CGSizeMake(0.f, 1.f);
    //  [self setHeaderTitleText:[logic selectedMonthNameAndYear]];
    headerTitleLabel.text = [logic selectedMonthNameAndYear];
    [headerView addSubview:headerTitleLabel];
    
    // Create the next month button on the right side of the view
    CGRect nextMonthButtonFrame = CGRectMake(headerView.width - kChangeMonthButtonWidth-25,
                                             kHeaderVerticalAdjust,
                                             kChangeMonthButtonWidth,
                                             kChangeMonthButtonHeight);
    UIButton *nextMonthButton = [[UIButton alloc] initWithFrame:nextMonthButtonFrame];
    //  nextMonthButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentCenter;
    //  nextMonthButton.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [nextMonthButton setTitleColor:[UIColor colorWithRed:84/255.0 green:165/255.0 blue:242/255.0 alpha:1.0] forState:UIControlStateNormal];
    [nextMonthButton setTitle:@"今天" forState:UIControlStateNormal];
    [nextMonthButton addTarget:self action:@selector(showTodayDate) forControlEvents:UIControlEventTouchUpInside];
    [nextMonthButton setBackgroundImage:[UIImage imageNamed:@"rectangle_bg.png" imageBundle:kKalCalendarBundle] forState:UIControlStateNormal];
    [headerView addSubview:nextMonthButton];
    [nextMonthButton release];
    
    // Add column labels for each weekday (adjusting based on the current locale's first weekday)
    NSArray *weekdayNames = [[[[NSDateFormatter alloc] init] autorelease] shortWeekdaySymbols];
    //  NSUInteger firstWeekday = [[NSCalendar currentCalendar] firstWeekday];
    
    for (int i = 0; i < 7; ++i)
    {
        CGRect weekdayFrame = CGRectMake(5+60*i, 38.f+18, 60.f, 15);
        UILabel *weekdayLabel = [[UILabel alloc] initWithFrame:weekdayFrame];
        weekdayLabel.backgroundColor = [UIColor grayColor];
        weekdayLabel.font = [UIFont boldSystemFontOfSize:10.f];
        weekdayLabel.textAlignment = UITextAlignmentCenter;
        weekdayLabel.textColor = [UIColor colorWithRed:0.3f green:0.3f blue:0.3f alpha:1.f];
        //    weekdayLabel.shadowColor = [UIColor whiteColor];
        //    weekdayLabel.shadowOffset = CGSizeMake(0.f, 1.f);
        weekdayLabel.text = [self weekToChinese:[weekdayNames objectAtIndex:i]];
        [headerView addSubview:weekdayLabel];
        [weekdayLabel release];
    }
}

- (void)showJumpDate:(id)sender
{
    UIButton *btn = (UIButton *)sender;
    
    UIView *subView = [self createContentView];
    popListView = [[CustomPopListView alloc] initWithFrame:CGRectMake(0, 0, 1024, 768)];
    [popListView loadContentViewWith:subView withPosionView:btn];
    
    CGRect rect = subView.frame;
    rect.origin.y = rect.origin.y+2;
    subView.frame = rect;
    
    [popListView release];
}

- (void)cancelToJumpDate
{
    [popListView removeFromSuperview];
}

//生成弹出框内容视图
- (UIView *)createContentView
{
    UIView *subView = [[[UIView alloc] initWithFrame:CGRectMake(0, 0, 326, 310)] autorelease];
    subView.backgroundColor = [UIColor clearColor];
    
    UIImageView *bgImage = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 326, 310)];
    [bgImage setImage:[UIImage imageNamed:@"chooseTime_bg.png" imageBundle:kKalCalendarBundle]];
    [subView addSubview:bgImage];
    [bgImage release];
    
    UILabel *titleLab = [[UILabel alloc] initWithFrame:CGRectMake(0, 25, 326, 30)];
    titleLab.text = @"选择日期";
    titleLab.font = [UIFont boldSystemFontOfSize:20];
    titleLab.textAlignment = UITextAlignmentCenter;
    titleLab.textColor = [UIColor whiteColor];
    titleLab.backgroundColor = [UIColor clearColor];
    [subView addSubview:titleLab];
    [titleLab release];
    
    UIImageView *chooseBGImage = [[UIImageView alloc] initWithFrame:CGRectMake(11, 142, 304, 40)];
    [chooseBGImage setImage:[UIImage imageNamed:@"bg_cellBackground_style1_2.png" imageBundle:kKalCalendarBundle]];
    [subView addSubview:chooseBGImage];
    [chooseBGImage release];
    
    datePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(11, 53, 306, 235)];
    [datePicker setDatePickerMode:UIDatePickerModeDate];
    datePicker.minuteInterval = 5;
    datePicker.date = [NSDate date];
    [subView addSubview:datePicker];
    [datePicker release];
    
    UIButton *sureBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    sureBtn.frame = CGRectMake(10, 260, 100, 40);
    [sureBtn setTitle:@"确定" forState:UIControlStateNormal];
    [sureBtn addTarget:self action:@selector(sureToJumpDate) forControlEvents:UIControlEventTouchUpInside];
    [sureBtn setBackgroundImage:[UIImage imageNamed:@"rectangle_bg.png" imageBundle:kKalCalendarBundle] forState:UIControlStateNormal];
    [subView addSubview:sureBtn];
    
    UIButton *cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    cancelBtn.frame = CGRectMake(216, 260, 100, 40);
    [cancelBtn setTitle:@"取消" forState:UIControlStateNormal];
    [cancelBtn addTarget:self action:@selector(cancelToJumpDate) forControlEvents:UIControlEventTouchUpInside];
    [cancelBtn setBackgroundImage:[UIImage imageNamed:@"rectangle_bg.png" imageBundle:kKalCalendarBundle] forState:UIControlStateNormal];
    [subView addSubview:cancelBtn];
    
    return subView;
}

- (void)sureToJumpDate
{
    if (delegate)
    {
        [delegate jumpToDateWith:datePicker.date];
    }
    
    [popListView removeFromSuperview];
}

- (void)showTodayDate
{
    if (delegate)
    {
        [delegate jumpToDateWith:[NSDate date]];
    }
}

- (void)setDateLabelWithDate:(NSDate *)date
{
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"yyyy年M月d日 eeee"];
    [formatter setLocale:[[NSLocale alloc] initWithLocaleIdentifier:@"zh_CN"]];
    NSString *str = [formatter stringFromDate:date];
    
    headerTitleLabel.text = str;
    
    [formatter release];
}

/*********************************************************************
 Function description:中文显示星期
 Parameter:enWeek
 Return value: NSString
 Author: li_xiangai
 Remark: override
 *********************************************************************/
- (NSString *) weekToChinese:(NSString *) enWeek
{
    if (!([enWeek length] > 0)) {
        return nil;
    }
    NSString *upperWeek = [enWeek uppercaseString];
    NSString *chWeek = nil;
    if ([upperWeek isEqualToString:@"MON"]) {
        chWeek = @"周一";
    } else if([upperWeek isEqualToString:@"TUE"]) {
        chWeek = @"周二";
    } else if([upperWeek isEqualToString:@"WED"]) {
        chWeek = @"周三";
    } else if([upperWeek isEqualToString:@"THU"]) {
        chWeek = @"周四";
    } else if([upperWeek isEqualToString:@"FRI"]) {
        chWeek = @"周五";
    } else if([upperWeek isEqualToString:@"SAT"]) {
        chWeek = @"周六";
    } else if([upperWeek isEqualToString:@"SUN"]) {
        chWeek = @"周日";
    }
    return chWeek;
}


- (void)addSubviewsToContentView:(UIView *)contentV
{
    // Both the tile grid and the list of events will automatically lay themselves
    // out to fit the # of weeks in the currently displayed month.
    // So the only part of the frame that we need to specify is the width.
    CGRect fullWidthAutomaticLayoutFrame = CGRectMake(0.f, 0.f, self.width, 0.f);
    // The tile grid (the calendar body)
    gridView = [[KalGridView alloc] initWithFrame:fullWidthAutomaticLayoutFrame logic:logic delegate:delegate];
    
    
    [gridView addObserver:self forKeyPath:@"frame" options:NSKeyValueObservingOptionNew context:NULL];
    
    [contentV addSubview:gridView];
    
    // The list of events for the selected day
    //  tableView = [[UITableView alloc] initWithFrame:fullWidthAutomaticLayoutFrame style:UITableViewStylePlain];
    //  tableView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    //  [contentView addSubview:tableView];
    
    // Drop shadow below tile grid and over the list of events for the selected day
    //  shadowView = [[UIImageView alloc] initWithFrame:fullWidthAutomaticLayoutFrame];
    //  shadowView.image = [UIImage imageNamed:@"Kal.bundle/kal_grid_shadow.png"];
    //  shadowView.height = shadowView.image.size.height;
    //  [contentView addSubview:shadowView];
    
    // Trigger the initial KVO update to finish the contentView layout
    [gridView sizeToFit];
}

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
    if (object == gridView && [keyPath isEqualToString:@"frame"]) {
        
        /* Animate tableView filling the remaining space after the
         * gridView expanded or contracted to fit the # of weeks
         * for the month that is being displayed.
         *
         * This observer method will be called when gridView's height
         * changes, which we know to occur inside a Core Animation
         * transaction. Hence, when I set the "frame" property on
         * tableView here, I do not need to wrap it in a
         * [UIView beginAnimations:context:].
         */
        CGFloat gridBottom = gridView.top + gridView.height;
        CGRect frame = tableView.frame;
        frame.origin.y = gridBottom;
        frame.size.height = tableView.superview.height - gridBottom;
        CGRect newFrame = self.frame;
        newFrame.size.height = gridBottom + headerView.frame.size.height + 50;
        ;
        self.frame = newFrame;
        
    } else if ([keyPath isEqualToString:@"selectedMonthNameAndYear"]) {
        //    [self setHeaderTitleText:[change objectForKey:NSKeyValueChangeNewKey]];
        headerTitleLabel.text = [change objectForKey:NSKeyValueChangeNewKey];
        
    } else
    {
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}

- (void)setHeaderTitleText:(NSString *)text
{
    [headerTitleLabel setText:text];
    [headerTitleLabel sizeToFit];
    headerTitleLabel.left = floorf(self.width/2.f - headerTitleLabel.width/2.f);
}

- (void)jumpToSelectedMonth { [gridView jumpToSelectedMonth]; }

- (void)selectDate:(KalDate *)date { [gridView selectDate:date]; }

- (BOOL)isSliding { return gridView.transitioning; }

- (void)markTilesForDates:(NSArray *)dates { [gridView markTilesForDates:dates]; }

- (KalDate *)selectedDate { return gridView.selectedDate; }


-(void)setSchduleDictionary:(NSDictionary *)dictionary
{
    gridView.gridDictionary = dictionary;
}




- (void)dealloc
{
    [logic removeObserver:self forKeyPath:@"selectedMonthNameAndYear"];
    [logic release];
    
    [headerTitleLabel release];
    [gridView removeObserver:self forKeyPath:@"frame"];
    [gridView release];
    [tableView release];
    //  [shadowView release];
    [super dealloc];
}

@end
