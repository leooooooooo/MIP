//
//  CustomAlertController+Animate.m
//  CustomAlertView
//
//  Created by sea on 13-12-9.
//  Copyright (c) 2013å¹´ sea. All rights reserved.
//

#import "CustomAlertController+Animate.h"

#import <objc/runtime.h>
#import <QuartzCore/QuartzCore.h>

@implementation CustomAlertController (Animate)

- (void)showCustomAlertAnimateStyleDefault {
    
    [_containerWindow makeKeyAndVisible];
    
    UIView *contentView = self.contentViewController.view;
    
    CAKeyframeAnimation * animation;
    animation = [CAKeyframeAnimation animationWithKeyPath:@"transform"];
    animation.duration = 0.3;
    animation.removedOnCompletion = YES;
    animation.fillMode = kCAFillModeForwards;
    
    NSMutableArray *values = [NSMutableArray array];
    [values addObject:[NSValue valueWithCATransform3D:CATransform3DMakeScale(0.1, 0.1, 1.0)]];
    [values addObject:[NSValue valueWithCATransform3D:CATransform3DMakeScale(1.2, 1.2, 1.0)]];
    [values addObject:[NSValue valueWithCATransform3D:CATransform3DMakeScale(0.9, 0.9, 0.9)]];
    [values addObject:[NSValue valueWithCATransform3D:CATransform3DMakeScale(1.0, 1.0, 1.0)]];
    
    animation.values = values;
    
    animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
    [contentView.layer addAnimation:animation forKey:nil];
}

- (void)hideCustomAlertAnimateStyleDefault {
    
    UIView *contentView = self.contentViewController.view;
    
    CGFloat startRotation = [[contentView valueForKeyPath:@"layer.transform.rotation.z"] floatValue];
    CATransform3D rotation = CATransform3DMakeRotation(-startRotation + M_PI * 270.0 / 180.0, 0.0f, 0.0f, 0.0f);
    
    contentView.layer.transform = CATransform3DConcat(rotation, CATransform3DMakeScale(1, 1, 1));
    contentView.layer.opacity = 1.0f;
    
    [UIView animateWithDuration:0.2f delay:0.0 options:UIViewAnimationOptionTransitionNone
					 animations:^{
						 _containerViewController.view.backgroundColor = [UIColor colorWithRed:0.0f green:0.0f blue:0.0f alpha:0.0f];
                         contentView.layer.opacity = 0.0f;
					 }
					 completion:^(BOOL finished) {
                         
                         if (_originalWindowClass == object_getClass(_originalWindow)) {
                             
//                             [_originalWindow makeKeyAndVisible];
                         }

                         [self release];
					 }
	 ];
}




- (void)showCustomAlertAnimateStyle1 {
    
    UIView *containerView = _containerViewController.view;
    UIView *contentView = self.contentViewController.view;
    
    contentView.layer.shouldRasterize = YES;
    contentView.layer.rasterizationScale = [[UIScreen mainScreen] scale];
    
    containerView.layer.shouldRasterize = YES;
    containerView.layer.rasterizationScale = [[UIScreen mainScreen] scale];
    
    contentView.layer.opacity = 0.5f;
    contentView.layer.transform = CATransform3DMakeScale(1.3f, 1.3f, 1.0);
    
    [UIView animateWithDuration:0.2f delay:0.0 options:UIViewAnimationOptionCurveEaseInOut
					 animations:^{

                         contentView.layer.opacity = 1.0f;
                         contentView.layer.transform = CATransform3DMakeScale(1, 1, 1);
					 }
					 completion:^(BOOL finished) {
                         
                         
                     }
     ];
    
    [_containerWindow makeKeyAndVisible];
}

- (void)hideCustomAlertAnimateStyle1 {
    
    UIView *contentView = self.contentViewController.view;
    
    CATransform3D currentTransform = contentView.layer.transform;
    
    CGFloat startRotation = [[contentView valueForKeyPath:@"layer.transform.rotation.z"] floatValue];
    CATransform3D rotation = CATransform3DMakeRotation(-startRotation + M_PI * 270.0 / 180.0, 0.0f, 0.0f, 0.0f);
    
    contentView.layer.transform = CATransform3DConcat(rotation, CATransform3DMakeScale(1, 1, 1));
    contentView.layer.opacity = 1.0f;
    
    [UIView animateWithDuration:0.2f delay:0.0 options:UIViewAnimationOptionTransitionNone
					 animations:^{
						 _containerViewController.view.backgroundColor = [UIColor colorWithRed:0.0f green:0.0f blue:0.0f alpha:0.0f];
                         contentView.layer.transform = CATransform3DConcat(currentTransform, CATransform3DMakeScale(0.6f, 0.6f, 1.0));
                         contentView.layer.opacity = 0.0f;
					 }
					 completion:^(BOOL finished) {
                         
                         [_originalWindow makeKeyAndVisible];
                         
                         [self release];
					 }
	 ];

}

@end
